% function biovolSun03
% 
% [a,b,c,biovol,sa] = biovolSun03(thisShape);
%
% Tested on MacOS10.12.6. Example usage at line 191 of processPhotos.m
%
% Only call this function to take measurements interactively from a figure
% window in which a photograph of the cell is shown.
%
% Edit the script to add your own calibration - how many millimetres does
% one of your camera pixels represent? Here, the full FOV width and the 
% camera FOV width were measured using a 20 lines/mm interference grating.
% 5 grating lines were counted across the camera field of view 
% (5/20 = 0.25 mm). The camera images are 5184 pixels across, yielding 
% 0.25 mm / 5184 pixels as the resolution (code line 32).
% 
% No check is made for multiple figure windows - the active figure will be
% used. ctrl+C to break manually in case of error.
%
% Input: thisShape is a number from 1 to 35 indicating Sun & Liu (2003)
%           shape type;
% Outputs: a, b, c are the length, breadth and depth measurements
% Outputs: biovol and sa are the calculated cell volume and surface area.
%
% from Sun, J., D. Liu, 2003. Geometric models for calculating cell biovolume
%   and surface area for phytoplankton. J. Plankton Res. 25(11), 1331-1346
%
function [a,b,c,biovol,sa] = biovolSun03(thisShape)

% Conversion from figure units to microns requires YOUR OWN CALIBRATION:
% Edit this function code to suit your microscope setup:
mmPerPixel = .25 / 5184; % Here, the FOV width was measured using a 
                         % 20 lines/mm interference grating.

% Switch on shape number provided:
switch (thisShape)
    case 1 % sphere
        disp('Sphere: Click once on each edge of the cell to capture diameter: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (pi/6)*(a.^3);
        sa = pi*(a.^2);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(1:4)=nan;
        c(1:4) = nan;
    case 2
        disp('Prolate spheroid: ');
        disp('Click once on each edge to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the SHORT axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/6)*(b.^2*a);
        sa = ((pi.*b)/2)*(b + ( (a.^2 / sqrt(a.^2 - b.^2)) .* asin(sqrt(a.^2-b.^2)./a) ));
        
        % Check for imaginary components generated by asin(value>1):
        if ~isreal(sa)
            disp('Imaginary number generated for surface area: asin(value>1) - check dimensions!');
            sa = nan;
        end
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 3
        disp('Ellipsoid: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the SHORT axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/6)*a*b*c;
        sa = ((pi/4)*(b+c)) * ((b+c)/2 + ((2*a.^2)./sqrt((4*a.^2)-((b+c).^2))*asin(sqrt((4*a.^2)-((b+c).^2))./(2*a))));
        
          % Check for imaginary components generated by asin(value>1):
        if ~isreal(sa)
            disp('Imaginary number generated for surface area: asin(value>1) - check dimensions!');
            sa = nan;
        end
        
      % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 4
        disp('Cylinder: ');
        disp('Click once on each end to capture the cylinder DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cylinder HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a.^2*b;
        sa = pi*a*((a/2)+b);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 5
        disp('Cylinder+2 half-spheres: ');
        disp('Click once on each end to capture the SPHERE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the full cell LENGTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = pi*(b.^2)*( (a/4)-(b/12) );
        sa = pi*a*b;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 6
        disp('Cylinder+2 cones: ');
        disp('Click once on each end to capture the full cell LENGTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cylinder DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*b.^2 *(a-(b/3));
        sa = pi*b*(a - ( ((4-sqrt(3))/4)*b) );
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
       
    case 7
        disp('Cone: ');
        disp('Click once on each end to capture the cone HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cone BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/12)*a*b.^2;
        sa = (pi/4)*b*(b + sqrt((4*a.^2)+b.^2));
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
       
    case 8
        disp('Double cone: ');
        disp('Click once on each end to capture the full cell HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cone BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/12)*a*b.^2;
        sa = (pi/2)*b*sqrt(a.^2 + b.^2);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 9
        disp('Cone + half-spahere: ');
        disp('Click once on each end to capture the full cell HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cone BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b.^2;
        sa = (pi/2)*b.^2*(b+sqrt((2*a.^2 - a*b + b.^2)/2));
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 10
        disp('Rectangular box: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = a*b*c;
        sa = 2*a*b + 2*b*c + 2*a*c;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 11
        disp('Prism on elliptical base: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/2)*(a*b + b*c + a*c);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 12
        disp('Elliptical prism with transapical constriction: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/2)*(a*b + b*c + a*c);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 13
        disp('Prism on parallelogram base: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/2)*a*b*c;
        sa = a*b + (sqrt(a.^2 + b.^2) / 4)*c;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 14
        disp('Half-elliptic prism: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/4)*(a*b + b*c + a*c) + a*c;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
       
    case 15
        disp('Sickle-shaped prism: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the maximum cell BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CELL DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/4)*(a*b + b*c + a*c) + a*c;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
       
    case 16
        disp('Sickle-shaped cylinder: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cylinder DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/6)*a*(b.^2);
        sa = (pi/2)*b*sqrt(a.^2 + b.^2);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 17
        disp('Cymbelloid (orange segment): ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the maximum segment BREADTH (shortcut the arc): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the SEGMENT DIAMETER or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (2/3)*a*(c.^2)*asin(b/(2*c));
        sa = (pi/2)*a*c + b*(c+(a.^2/(2*sqrt(a.^2 - 4*c.^2)))*asin(sqrt(a.^2-4*c.^2)/a));
        
        % Check for imaginary components generated by asin(value>1):
        if ~isreal(biovol)
            disp('Imaginary number generated for biovol: asin(value>1) - check dimensions!');
            biovol = nan;
        end
        if ~isreal(sa)
            disp('Imaginary number generated for surface area: asin(value>1) - check dimensions!');
            sa = nan;
        end
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 18
        disp('Prism on triangle base: ');
        disp('Click once on each end to capture the LONG axis (base dimension): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the cell DEPTH (or an approximation thereof): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (sqrt(3)/4)*b*a.^2;
        sa = 3*a*b + (sqrt(3)/2)*a.^2;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 19
        disp('Pyramid: ');
        disp('Click once on each end to capture the PYRAMID BASE DIAGONAL: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the pyramid HEIGHT (or an approximation thereof): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (1/6)*a.^2 * b;
        sa = (1/2)*a.^2 + a*sqrt(a.^2 + 8*b.^2);
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 20
        disp('Elliptical prism with transapical inflation: ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the maximum transapical BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the cell DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/2)*(a*b + b*c + a*c);
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 21
        disp('Gomphonemoid (rounded wedge): ');
        disp('Click once on each end to capture the LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the maximum cell BREADTH (cf diameter): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the maximum cell DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (a*b/4)*(a+ (pi/4 - 1)*b)*asin(c/(2*a));
        sa = (b/2)*(2*a + (pi*a*asin(c/(2*a)) + (pi/2 - 2)*b));
        
        % Check for imaginary components generated by asin(value>1):
        if ~isreal(biovol)
            disp('Imaginary number generated for biovol: asin(value>1) - check dimensions!');
            biovol = nan;
        end
        if ~isreal(sa)
            disp('Imaginary number generated for surface area: asin(value>1) - check dimensions!');
            sa = nan;
        end
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 22
        disp('Cone + half-sphere + cylinder: ');
        disp('Click once on each end to capture the CYLINDER LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click once on each edge to capture the CONE VERTICAL AXIS: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(2)=z*mmPerPixel*1000;
        
        disp('Click twice to capture the CYLINDER DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click twice to capture the CONE BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(2)=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (pi/3)*(a(1)+a(2))*b(1).^2 + (pi/4)*(a(2) + b(2))*b(2).^2 + ...
            (pi/12)*a(2)*b(1)*b(2);
        sa = pi*a(1)*b(1) + (pi/4)*b(1).^2 + (pi/2)*b(2).^2 + ...
            (pi/2)*b(2).^2*sqrt( (a(1)/b(1)).^2 + .25) - ...
            (pi/2)*b(1)*sqrt(((a(1)*b(1))/b(1) - a(1)).^2 + (b(1).^2)/4);
                
        % Fill in the blanks:
        a(3:4) = nan;
        b(3:4) = nan;
        c(1:4) = nan;
        
    case 23
        disp('Elliptic prism + 4 identical cones: ');
        disp('Click once on each end to capture the CYLINDER LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
               
        disp('Click twice to capture the CYLINDER x-Section LONG AXIS: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click twice to capture the CYLINDER x-Section SHORT AXIS (cell depth, or an approximation thereof): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        disp('Click once on each edge to capture the CONE HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(2)=z*mmPerPixel*1000;

        disp('Click twice to capture the CONE BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(2)=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (pi/4)*a(1)*b(1)*c(1) + (pi/3)*a(2)*b(2).^2;
        sa = (pi/2)*a(1)*b(1) + (pi/2)*b(1)*c(1) + (pi/2)*a(1)*c(1) + ...
            pi*b(2)*(sqrt(4*a(2).^2 + b(2).^2) - b(2));
                
        % Fill in the blanks:
        a(3:4) = nan;
        b(3:4) = nan;
        c(2:4) = nan;
        
    case 24
        disp('2 Cylinders + elliptical prism: ');
        disp('Click once on each end to capture the CELL LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the CELL BREADTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click once on each end to capture the cell DEPTH or an approximation thereof: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/2)*(a*b + b*c + a*c);
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 25
        disp('Ellipsoid + 2 unequal cones + cylinder: ');
        disp('Click once on each end to capture the ELLIPSOID LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;

        disp('Click once on each end to capture the ELLIPSOID SHORT axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;
        
        disp('Click once on each end to capture the CYLINDER LONG axis: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(2)=z*mmPerPixel*1000;

        disp('Click once on each end to capture the CYLINDER DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(2)=z*mmPerPixel*1000;

        disp('Click twice to capture the FIRST CONE HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(3)=z*mmPerPixel*1000;

        disp('Click twice to capture the SECOND CONE HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(4)=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*a(2)*(b(2).^2) + (pi/12)*(a(3)+a(4))*b(2).^2 + ...
            (pi/6)*a(1)*b(1)*b(2);
        sa = (pi/4)*(b(1)+b(2))*( (b(1)+b(2))/2 + (a(1).^2)/sqrt(a(1).^2-((b(1)+b(2))/2).^2)*...
            asin( sqrt(a(1).^2 - ((b(1)+b(2))/2).^2)/a(1) ) ) + ...
            (pi/2)*b(2)*(2*a(2) + sqrt(a(3).^2 + (b(2).^2)/4) + sqrt(a(4).^2 + (b(2).^2)/4) - b(2) );
                
        % Check for imaginary components generated by asin(value>1):
        if ~isreal(sa)
            disp('Imaginary number generated for surface area: asin(value>1) - check dimensions!');
            sa = nan;
        end
        
        % Fill in the blanks:
        b(2:4) = nan;
        c(1:4) = nan;
      
    case 26
        disp('Half-sphere:  ');
        disp('Click once on each edge of the cell to capture diameter: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (pi/12)*a.^3;
        sa = ((3*pi)/4) * a.^2;
        
        % Fill in the blanks:
        a(2:4)=nan;
        b(1:4)=nan;
        c(1:4) = nan;
        
    case 27
        disp('Cone and 3 cylinders, of which two are identical: ');
        disp('Click twice to capture the CONE HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;

        disp('Click twice to capture the CONE BASE DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click twice to capture the FIRST - UNIQUE - CYLINDER HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(2)=z*mmPerPixel*1000;

        disp('Click twice to capture the FIRST  - UNIQUE -CYLINDER DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(2)=z*mmPerPixel*1000;

        disp('Click twice to capture the OTHER CYLINDER HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(3)=z*mmPerPixel*1000;

        disp('Click twice to capture the OTHER CYLINDER DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(3)=z*mmPerPixel*1000;
    
        % Calculate volume and sa:
        biovol = (pi/4)*a(2)*b(2).^2 + (pi/2)*a(3)*b(3).^2 + (pi/12)*a(1)*(b(1).^2 +...
            b(1)*b(2) + b(2).^2);
        sa = (pi/2)*(b(1)+b(2))*sqrt(a(1).^2 + ((b(1)-b(2))/2).^2) + ...
            (pi/4)*(b(1).^2 + b(2).^2) + 2*pi*(a(2)*b(2) + a(3)*b(3));
                        
        % Fill in the blanks:
        a(4) = nan;
        b(4) = nan;
        c(1:4) = nan;

    case 28
        disp('Cylinder girdle-view: ');
        disp('Click once on each edge to capture the CYLINDER HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the CYLINDER DIAMETER: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        % Calculate volume and sa:
        biovol = (pi/4)*b.^2*a;
        sa = pi*b*(b/2 + a);
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
        
    case 29
        disp('Prism on elliptic base girdle-view: ');
        disp('Click once on each edge to capture the CELL HEIGHT: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the CELL cross-section LONG AXIS: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;

        disp('Click twice to capture the CELL cross-section SHORT AXIS (or an approximation thereof): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (pi/4)*a*b*c;
        sa = (pi/2)*(a*b + b*c + a*c);
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(2:4) = nan;
        
    case 30
        disp('Prism on triangle base, girdle-view: ');
        disp('Click once on each edge to capture the CELL LENGTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the CELL BASE LENGTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = (sqrt(3)/4)*a*b.^2;
        sa = 3*a*b + (sqrt(3)/2)*b.^2;
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
      
    case 31
        disp('Box + elliptical prism (matchstick): ');
        disp('Click once on each edge to capture the BOX LENGTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear a; a=z*mmPerPixel*1000;
        
        disp('Click twice to capture the BOX WIDTH: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear b; b=z*mmPerPixel*1000;
                
        disp('Click twice to capture the BOX HEIGHT (or an approximation thereof): ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        clear c; c=z*mmPerPixel*1000;
        
        disp('Click once on each edge to capture the ELLIPSE LONG AXIS: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        a(2)=z*mmPerPixel*1000;
        
        disp('Click twice to capture the ELLIPSE SHORT AXIS: ');
        clear x y; [x,y] = ginput(2);
        clear z; z = sqrt((x(2)-x(1)).^2 + (y(2)-y(1)).^2);
        % Convert to micrometers:
        b(2)=z*mmPerPixel*1000;
        
        % Calculate volume and sa:
        biovol = c*(a(1)*b(1) + (pi/4)*a(2)*b(2));
        sa = c*(2*a(1) + b(1) + (pi/2)*a(2) + (pi/2)*b(2)) + ...
                2*a(1)*b(1) + (pi/2)*a(2)*b(2);
                
        % Fill in the blanks:
        a(2:4)=nan;
        b(2:4)=nan;
        c(1:4) = nan;
                
    otherwise
        % Out of range shape index provided - return error:
        disp('Input shape index out of range (1 to 31) - check references');
                % Fill in the blanks:
        a(1:4)=nan;
        b(1:4)=nan;
        c(1:4) = nan;
        biovol = nan;
        sa = nan;
    end

end

        
